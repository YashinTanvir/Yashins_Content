{"ast":null,"code":"var _jsxFileName = \"/Users/tanvirrahman/Desktop/Submit/ChatApp/src/components/authpage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react'; // Importing React and useState hook\nimport { useNavigate } from 'react-router-dom'; // Importing useNavigate hook for handling navigation\nimport './AuthPage.css'; // Importing CSS file for styling\nimport eyeOpen from '../assets/eye-open.png'; // Importing eye-open icon for toggling password visibility\nimport eyeClosed from '../assets/eye-closed.png'; // Importing eye-closed icon for toggling password visibility\n\n// Defining the AuthPage functional component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthPage = () => {\n  _s();\n  const [isLogin, setIsLogin] = useState(true); // Setting state to toggle between Login and Sign Up views\n  const [isForgotPassword, setIsForgotPassword] = useState(false); // Setting state to handle Forgot Password view\n  const [username, setUsername] = useState(''); // Setting state to store username input\n  const [password, setPassword] = useState(''); // Setting state to store password input\n  const [retypePassword, setRetypePassword] = useState(''); // Setting state to store retyped password for Sign Up\n  const [showPassword, setShowPassword] = useState(false); // Setting state to toggle password visibility\n  const [error, setError] = useState(''); // Setting state to handle and display error messages\n  const navigate = useNavigate(); // Using useNavigate hook for navigating between routes\n\n  // Handling the Login process\n  const handleLogin = () => {\n    const users = JSON.parse(localStorage.getItem('users')) || {}; // Retrieving stored users from localStorage\n    if (users[username] && users[username].password === password) {\n      // Checking if username exists and password matches\n      localStorage.setItem('activeUser', username); // Setting active user in localStorage\n      navigate('/chats'); // Navigating to the chats page\n    } else {\n      setError('Invalid username or password'); // Setting error message if login fails\n    }\n  };\n\n  // Handling the Sign Up process\n  const handleSignUp = () => {\n    if (password !== retypePassword) {\n      // Checking if passwords match\n      setError('Passwords do not match'); // Setting error message if passwords don't match\n      return;\n    }\n    const users = JSON.parse(localStorage.getItem('users')) || {}; // Retrieving stored users from localStorage\n    if (users[username]) {\n      // Checking if username already exists\n      setError('Username already exists'); // Setting error message if username already exists\n      return;\n    }\n    users[username] = {\n      password\n    }; // Adding new user to the users object\n    localStorage.setItem('users', JSON.stringify(users)); // Saving updated users object in localStorage\n    alert('Signup successful! Please login with your credentials.'); // Alerting user of successful signup\n    setIsLogin(true); // Switching to Login view\n    setUsername(''); // Clearing the username input\n    setPassword(''); // Clearing the password input\n    setRetypePassword(''); // Clearing the retype password input\n    setError(''); // Clearing any error messages\n  };\n\n  // Handling the Forgot Password process\n  const handleForgotPassword = () => {\n    const users = JSON.parse(localStorage.getItem('users')) || {}; // Retrieving stored users from localStorage\n    if (users[username]) {\n      // Checking if username exists\n      users[username].password = password; // Updating user's password\n      localStorage.setItem('users', JSON.stringify(users)); // Saving updated users object in localStorage\n      alert('Password reset successful! Please login with your new password.'); // Alerting user of successful password reset\n      setIsForgotPassword(false); // Switching to Login view\n      setIsLogin(true); // Switching to Login view\n      setUsername(''); // Clearing the username input\n      setPassword(''); // Clearing the password input\n      setError(''); // Clearing any error messages\n    } else {\n      setError('Username does not exist'); // Setting error message if username does not exist\n    }\n  };\n\n  // Handling the visibility toggle of the password\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword); // Toggling the showPassword state\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-container\",\n    children: [\" \", isLogin && !isForgotPassword && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-container\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), \" \", error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username // Binding username input value to state\n        ,\n        onChange: e => setUsername(e.target.value) // Updating username state on change\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"password-container\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: showPassword ? 'text' : 'password' // Setting conditional input type based on showPassword state\n          ,\n          placeholder: \"Password\",\n          value: password // Binding password input value to state\n          ,\n          onChange: e => setPassword(e.target.value) // Updating password state on change\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: showPassword ? eyeClosed : eyeOpen // Toggling eye icon based on showPassword state\n          ,\n          alt: \"Toggle Password Visibility\",\n          className: \"eye-icon\",\n          onClick: togglePasswordVisibility // Toggling password visibility on click\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-options\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"remember-me\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: \"rememberMe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"rememberMe\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: \"Remember_me\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"forgot-password-link\",\n          onClick: () => setIsForgotPassword(true) // Switching to Forgot Password view\n          ,\n          children: \"Forgot Password?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsLogin(false),\n        children: \"New User? Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), !isLogin && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"signup-container\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this), \" \", error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username // Binding username input value to state\n        ,\n        onChange: e => setUsername(e.target.value) // Updating username state on change\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"password-container\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: showPassword ? 'text' : 'password' // Setting conditional input type based on showPassword state\n          ,\n          placeholder: \"Password\",\n          value: password // Binding password input value to state\n          ,\n          onChange: e => setPassword(e.target.value) // Updating password state on change\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: showPassword ? eyeClosed : eyeOpen // Toggling eye icon based on showPassword state\n          ,\n          alt: \"Toggle Password Visibility\",\n          className: \"eye-icon\",\n          onClick: togglePasswordVisibility // Toggling password visibility on click\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"password-container\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: showPassword ? 'text' : 'password' // Setting conditional input type based on showPassword state\n          ,\n          placeholder: \"Retype Password\",\n          value: retypePassword // Binding retype password input value to state\n          ,\n          onChange: e => setRetypePassword(e.target.value) // Updating retype password state on change\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: showPassword ? eyeClosed : eyeOpen // Toggling eye icon based on showPassword state\n          ,\n          alt: \"Toggle Password Visibility\",\n          className: \"eye-icon\",\n          onClick: togglePasswordVisibility // Toggling password visibility on click\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terms-container\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"terms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"terms\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: '2px'\n            },\n            children: \"Agreeing to the terms & conditions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSignUp,\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsLogin(true),\n        children: \"Back to Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), isForgotPassword && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forgot-password-container\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Forgot Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), \" \", error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username // Binding username input value to state\n        ,\n        onChange: e => setUsername(e.target.value) // Updating username state on change\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"password-container\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: showPassword ? 'text' : 'password' // Setting conditional input type based on showPassword state\n          ,\n          placeholder: \"New Password\",\n          value: password // Binding new password input value to state\n          ,\n          onChange: e => setPassword(e.target.value) // Updating new password state on change\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: showPassword ? eyeClosed : eyeOpen // Toggling eye icon based on showPassword state\n          ,\n          alt: \"Toggle Password Visibility\",\n          className: \"eye-icon\",\n          onClick: togglePasswordVisibility // Toggling password visibility on click\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleForgotPassword,\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsForgotPassword(false);\n          setIsLogin(true);\n        },\n        children: \"Back to Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthPage, \"J60n0kHr7IV+EhrBMgKlwiY/9CY=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthPage;\nexport default AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","useState","useNavigate","eyeOpen","eyeClosed","jsxDEV","_jsxDEV","AuthPage","_s","isLogin","setIsLogin","isForgotPassword","setIsForgotPassword","username","setUsername","password","setPassword","retypePassword","setRetypePassword","showPassword","setShowPassword","error","setError","navigate","handleLogin","users","JSON","parse","localStorage","getItem","setItem","handleSignUp","stringify","alert","handleForgotPassword","togglePasswordVisibility","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","src","alt","onClick","id","htmlFor","style","marginTop","_c","$RefreshReg$"],"sources":["/Users/tanvirrahman/Desktop/Submit/ChatApp/src/components/authpage.js"],"sourcesContent":["import React, { useState } from 'react'; // Importing React and useState hook\nimport { useNavigate } from 'react-router-dom'; // Importing useNavigate hook for handling navigation\nimport './AuthPage.css'; // Importing CSS file for styling\nimport eyeOpen from '../assets/eye-open.png';  // Importing eye-open icon for toggling password visibility\nimport eyeClosed from '../assets/eye-closed.png';  // Importing eye-closed icon for toggling password visibility\n\n// Defining the AuthPage functional component\nconst AuthPage = () => {\n  const [isLogin, setIsLogin] = useState(true); // Setting state to toggle between Login and Sign Up views\n  const [isForgotPassword, setIsForgotPassword] = useState(false); // Setting state to handle Forgot Password view\n  const [username, setUsername] = useState(''); // Setting state to store username input\n  const [password, setPassword] = useState(''); // Setting state to store password input\n  const [retypePassword, setRetypePassword] = useState(''); // Setting state to store retyped password for Sign Up\n  const [showPassword, setShowPassword] = useState(false); // Setting state to toggle password visibility\n  const [error, setError] = useState(''); // Setting state to handle and display error messages\n  const navigate = useNavigate(); // Using useNavigate hook for navigating between routes\n\n  // Handling the Login process\n  const handleLogin = () => {\n    const users = JSON.parse(localStorage.getItem('users')) || {};  // Retrieving stored users from localStorage\n    if (users[username] && users[username].password === password) { // Checking if username exists and password matches\n      localStorage.setItem('activeUser', username);  // Setting active user in localStorage\n      navigate('/chats');  // Navigating to the chats page\n    } else {\n      setError('Invalid username or password');  // Setting error message if login fails\n    }\n  };\n\n  // Handling the Sign Up process\n  const handleSignUp = () => {\n    if (password !== retypePassword) { // Checking if passwords match\n      setError('Passwords do not match');  // Setting error message if passwords don't match\n      return;\n    }\n\n    const users = JSON.parse(localStorage.getItem('users')) || {};  // Retrieving stored users from localStorage\n    if (users[username]) { // Checking if username already exists\n      setError('Username already exists');  // Setting error message if username already exists\n      return;\n    }\n\n    users[username] = { password };  // Adding new user to the users object\n    localStorage.setItem('users', JSON.stringify(users));  // Saving updated users object in localStorage\n    alert('Signup successful! Please login with your credentials.');  // Alerting user of successful signup\n    setIsLogin(true);  // Switching to Login view\n    setUsername('');  // Clearing the username input\n    setPassword('');  // Clearing the password input\n    setRetypePassword('');  // Clearing the retype password input\n    setError('');  // Clearing any error messages\n  };\n\n  // Handling the Forgot Password process\n  const handleForgotPassword = () => {\n    const users = JSON.parse(localStorage.getItem('users')) || {};  // Retrieving stored users from localStorage\n    if (users[username]) { // Checking if username exists\n      users[username].password = password;  // Updating user's password\n      localStorage.setItem('users', JSON.stringify(users));  // Saving updated users object in localStorage\n      alert('Password reset successful! Please login with your new password.');  // Alerting user of successful password reset\n      setIsForgotPassword(false);  // Switching to Login view\n      setIsLogin(true);  // Switching to Login view\n      setUsername('');  // Clearing the username input\n      setPassword('');  // Clearing the password input\n      setError('');  // Clearing any error messages\n    } else {\n      setError('Username does not exist');  // Setting error message if username does not exist\n    }\n  };\n\n  // Handling the visibility toggle of the password\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);  // Toggling the showPassword state\n  };\n  \n  return (\n    <div className=\"auth-container\"> {/* Creating main container for authentication forms */}\n      {/* Rendering Login View */}\n      {isLogin && !isForgotPassword && (\n        <div className=\"login-container\"> {/* Creating container for Login form */}\n          <h2>Login</h2> {/* Rendering heading for Login form */}\n          {error && <p className=\"error\">{error}</p>}  {/* Displaying error message if any */}\n          <input\n            type=\"text\"\n            placeholder=\"Username\"\n            value={username}  // Binding username input value to state\n            onChange={(e) => setUsername(e.target.value)}  // Updating username state on change\n          />\n          <div className=\"password-container\"> {/* Creating container for password input and visibility toggle */}\n            <input\n              type={showPassword ? 'text' : 'password'}  // Setting conditional input type based on showPassword state\n              placeholder=\"Password\"\n              value={password}  // Binding password input value to state\n              onChange={(e) => setPassword(e.target.value)}  // Updating password state on change\n            />\n            <img\n              src={showPassword ? eyeClosed : eyeOpen}  // Toggling eye icon based on showPassword state\n              alt=\"Toggle Password Visibility\"\n              className=\"eye-icon\"\n              onClick={togglePasswordVisibility}  // Toggling password visibility on click\n            />\n          </div>\n          <div className=\"login-options\"> {/* Creating container for remember me and forgot password options */}\n            <div className=\"remember-me\">\n              <input type=\"checkbox\" id=\"rememberMe\" />\n              <label htmlFor=\"rememberMe\"><a>Remember_me</a></label> {/* Creating Remember me checkbox */}\n            </div>\n            <button\n              className=\"forgot-password-link\"\n              onClick={() => setIsForgotPassword(true)}  // Switching to Forgot Password view\n            >\n              Forgot Password?\n            </button>\n          </div>\n          <button onClick={handleLogin}>Login</button>  {/* Creating Login button */}\n          <button onClick={() => setIsLogin(false)}>New User? Sign Up</button>  {/* Switching to Sign Up view */}\n        </div>\n      )}\n\n      {/* Rendering Sign Up View */}\n      {!isLogin && (\n        <div className=\"signup-container\"> {/* Creating container for Sign Up form */}\n          <h2>Sign Up</h2> {/* Rendering heading for Sign Up form */}\n          {error && <p className=\"error\">{error}</p>}  {/* Displaying error message if any */}\n          <input\n            type=\"text\"\n            placeholder=\"Username\"\n            value={username}  // Binding username input value to state\n            onChange={(e) => setUsername(e.target.value)}  // Updating username state on change\n          />\n          <div className=\"password-container\"> {/* Creating container for password input and visibility toggle */}\n            <input\n              type={showPassword ? 'text' : 'password'}  // Setting conditional input type based on showPassword state\n              placeholder=\"Password\"\n              value={password}  // Binding password input value to state\n              onChange={(e) => setPassword(e.target.value)}  // Updating password state on change\n            />\n            <img\n              src={showPassword ? eyeClosed : eyeOpen}  // Toggling eye icon based on showPassword state\n              alt=\"Toggle Password Visibility\"\n              className=\"eye-icon\"\n              onClick={togglePasswordVisibility}  // Toggling password visibility on click\n            />\n          </div>\n          <div className=\"password-container\"> {/* Creating container for retype password input */}\n            <input\n              type={showPassword ? 'text' : 'password'}  // Setting conditional input type based on showPassword state\n              placeholder=\"Retype Password\"\n              value={retypePassword}  // Binding retype password input value to state\n              onChange={(e) => setRetypePassword(e.target.value)}  // Updating retype password state on change\n            />\n            <img\n              src={showPassword ? eyeClosed : eyeOpen}  // Toggling eye icon based on showPassword state\n              alt=\"Toggle Password Visibility\"\n              className=\"eye-icon\"\n              onClick={togglePasswordVisibility}  // Toggling password visibility on click\n            />\n          </div>\n          <div className=\"terms-container\"> {/* Creating container for terms and conditions checkbox */}\n            <input type=\"checkbox\" id=\"terms\" />\n            <label htmlFor=\"terms\"><div style={{ marginTop: '2px' }}>Agreeing to the terms & conditions</div></label>\n          </div>\n          <button onClick={handleSignUp}>Sign Up</button>  {/* Creating Sign Up button */}\n          <button onClick={() => setIsLogin(true)}>Back to Login</button>  {/* Switching to Login view */}\n        </div>\n      )}\n\n      {/* Rendering Forgot Password View */}\n      {isForgotPassword && (\n        <div className=\"forgot-password-container\"> {/* Creating container for Forgot Password form */}\n          <h2>Forgot Password</h2> {/* Rendering heading for Forgot Password form */}\n          {error && <p className=\"error\">{error}</p>}  {/* Displaying error message if any */}\n          <input\n            type=\"text\"\n            placeholder=\"Username\"\n            value={username}  // Binding username input value to state\n            onChange={(e) => setUsername(e.target.value)}  // Updating username state on change\n          />\n          <div className=\"password-container\"> {/* Creating container for new password input */}\n            <input\n              type={showPassword ? 'text' : 'password'}  // Setting conditional input type based on showPassword state\n              placeholder=\"New Password\"\n              value={password}  // Binding new password input value to state\n              onChange={(e) => setPassword(e.target.value)}  // Updating new password state on change\n            />\n            <img\n              src={showPassword ? eyeClosed : eyeOpen}  // Toggling eye icon based on showPassword state\n              alt=\"Toggle Password Visibility\"\n              className=\"eye-icon\"\n              onClick={togglePasswordVisibility}  // Toggling password visibility on click\n            />\n          </div>\n          <button onClick={handleForgotPassword}>Reset Password</button>  {/* Creating Reset Password button */}\n          <button onClick={() => { setIsForgotPassword(false); setIsLogin(true); }}>Back to Login</button>  {/* Switching back to Login view */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AuthPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}